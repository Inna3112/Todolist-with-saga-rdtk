[{"/Users/innafomichova/Documents/incubator/todolist-16/src/app/store.ts":"1","/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/auth-reducer.tsx":"2","/Users/innafomichova/Documents/incubator/todolist-16/src/app/app-reducer.ts":"3","/Users/innafomichova/Documents/incubator/todolist-16/src/components/ErrorSnackbar/ErrorSnackbar.tsx":"4","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/tasks-reducer.ts":"5","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/todolists-reducer.ts":"6","/Users/innafomichova/Documents/incubator/todolist-16/src/utils/error-utils.ts":"7","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/TodolistsList.tsx":"8","/Users/innafomichova/Documents/incubator/todolist-16/src/components/EditableSpan/EditableSpan.tsx":"9","/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/Login.tsx":"10","/Users/innafomichova/Documents/incubator/todolist-16/src/api/todolists-api.ts":"11","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Task/Task.tsx":"12","/Users/innafomichova/Documents/incubator/todolist-16/src/index.tsx":"13","/Users/innafomichova/Documents/incubator/todolist-16/src/reportWebVitals.ts":"14","/Users/innafomichova/Documents/incubator/todolist-16/src/app/App.tsx":"15","/Users/innafomichova/Documents/incubator/todolist-16/src/components/AddItemForm/AddItemForm.tsx":"16","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Todolist.tsx":"17"},{"size":1640,"mtime":1635263535903,"results":"18","hashOfConfig":"19"},{"size":2929,"mtime":1637182586864,"results":"20","hashOfConfig":"19"},{"size":1976,"mtime":1635187816987,"results":"21","hashOfConfig":"19"},{"size":1101,"mtime":1635186244818,"results":"22","hashOfConfig":"19"},{"size":7738,"mtime":1636572988327,"results":"23","hashOfConfig":"19"},{"size":4491,"mtime":1635190731220,"results":"24","hashOfConfig":"19"},{"size":698,"mtime":1635188338741,"results":"25","hashOfConfig":"19"},{"size":3922,"mtime":1635272337938,"results":"26","hashOfConfig":"19"},{"size":952,"mtime":1594154724000,"results":"27","hashOfConfig":"19"},{"size":4183,"mtime":1637182613186,"results":"28","hashOfConfig":"19"},{"size":3081,"mtime":1637180236342,"results":"29","hashOfConfig":"19"},{"size":1773,"mtime":1596295538000,"results":"30","hashOfConfig":"19"},{"size":752,"mtime":1628782693806,"results":"31","hashOfConfig":"19"},{"size":425,"mtime":1607872988000,"results":"32","hashOfConfig":"19"},{"size":2342,"mtime":1635181807863,"results":"33","hashOfConfig":"19"},{"size":1595,"mtime":1596715562000,"results":"34","hashOfConfig":"19"},{"size":4097,"mtime":1635181807864,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"6sf0ce",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},"/Users/innafomichova/Documents/incubator/todolist-16/src/app/store.ts",[],["77","78"],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/auth-reducer.tsx",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/app/app-reducer.ts",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/components/ErrorSnackbar/ErrorSnackbar.tsx",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/tasks-reducer.ts",["79"],"import {\n    addTodolistAC, removeTodolistAC,\n    setTodolistsAC,\n} from './todolists-reducer'\nimport {\n    TaskPriorities,\n    TaskStatuses,\n    TaskType,\n    todolistsAPI,\n    UpdateTaskModelType\n} from '../../api/todolists-api'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport axios, {AxiosError} from \"axios\";\n\nconst initialState: TasksStateType = {}\n\n//данные в санк нужно передавать обьектом пейлоад, если их несколько\n//thunkAPI - это диспатч и гетстейт\n//ВЫГОДА ТАКОЙ САНК: создается 2 екшена - один выполнится при успешном выполнении запроса на сервер, второй при ошибке\n\n// fetchTasksTC\ninterface FetchTasksData {\n    tasks: TaskType[],\n    todolistId: string\n}\n\nexport const fetchTasksTC = createAsyncThunk<FetchTasksData, string>('tasks/fetchTasks', (todolistId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n    //нужно обязательно вернуть промис в builder\n    return todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            // thunkAPI.dispatch(setTasksAC({tasks, todolistId}))\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\n            //здесь ретурнится промис из then зарезолвленный этим обьектом\n            return {tasks, todolistId} as FetchTasksData\n        })\n})\n\n// removeTaskTC\ninterface RemoveTaskData {\n    taskId: string,\n    todolistId: string\n}\n\nexport const removeTaskTC = createAsyncThunk<RemoveTaskData, RemoveTaskData>('tasks/removeTask', async (param: { taskId: string, todolistId: string }) => {\n    const res = todolistsAPI.deleteTask(param.todolistId, param.taskId)\n    return ({taskId: param.taskId, todolistId: param.todolistId} as RemoveTaskData)\n})\n\n\n// @ts-ignore\nexport const addTaskTC = createAsyncThunk<TaskType, { title: string, todolistId: string }, { rejectValue: null }>('tasks/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\n    try {\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\n            return res.data.data.item\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch);\n            return thunkAPI.rejectWithValue(null)\n        }\n    } catch (err) {\n        const error: AxiosError | unknown = err\n        if(axios.isAxiosError(error)){\n            handleServerNetworkError(error, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue(null)\n        }\n    }\n})\n\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: any, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\nconst slice = createSlice({\n    name: 'tasks',\n    initialState: initialState,\n    // здесь выполняют функцию редюсеров и создают экшены\n    reducers: {\n        // removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>){\n        //     const tasks = state[action.payload.todolistId]\n        //     const index = tasks.findIndex(t => t.id === action.payload.taskId)\n        //     if(index > -1){\n        //         tasks.splice(index, 1)\n        //     }\n        // },\n        // addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n        //     state[action.payload.task.todoListId].unshift(action.payload.task)\n        // },\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        },\n        // setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\n        //     state[action.payload.todolistId] = action.payload.tasks\n        // },\n    },\n    // нужны тогда, когда не нужно создавать экшен - он уже создат в todolistReducer, а нужно выполнить функцию редюсера\n    //можно обработать АС написанные вручную здесь\n\n    //можно передать обьектом, но тогда нужно будет выносить типизацию екшина вручную\n    // extraReducers: {\n    // [addTodolistAC.type](state, action: PayloadAction<{}>){},\n    // [removeTodolistAC.type](state, action: PayloadAction<{}>){},\n    // [setTodolistsAC.type](state, action: PayloadAction<{}>){},\n    // }\n    //поэтому:\n    extraReducers: (builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = []\n        });\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.id]\n        });\n        builder.addCase(setTodolistsAC, (state, action) => {\n            action.payload.todolists.forEach((tl: any) => {\n                state[tl.id] = []\n            })\n        });\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\n            state[action.payload.todolistId] = action.payload.tasks\n        });\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        });\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\n            state[action.payload.todoListId].unshift(action.payload)\n        });\n    }\n})\n\nexport const tasksReducer = slice.reducer\nexport const {updateTaskAC} = slice.actions\n\n\n// thunks\n\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/todolists-reducer.ts",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/utils/error-utils.ts",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/TodolistsList.tsx",["80","81","82","83","84","85","86","87"],"import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../app/store'\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolists-api'\nimport {Grid, Paper} from '@material-ui/core'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport {Redirect} from 'react-router-dom';\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (demo || !isLoggedIn) {\n            return;\n        }\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [])\n\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\n        const thunk = removeTaskTC({taskId, todolistId})\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback(async function (title: string, todolistId: string) {\n        dispatch(addTaskTC({title, todolistId}))\n    }, [])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\n        dispatch(action)\n    }, [])\n\n    const removeTodolist = useCallback(function (id: string) {\n        const thunk = removeTodolistTC(id)\n        dispatch(thunk)\n    }, [])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const thunk = changeTodolistTitleTC(id, title)\n        dispatch(thunk)\n    }, [])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    if(!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: '10px'}}>\n                            <Todolist\n                                todolist={tl}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","/Users/innafomichova/Documents/incubator/todolist-16/src/components/EditableSpan/EditableSpan.tsx",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/Login.tsx",["88"],"/Users/innafomichova/Documents/incubator/todolist-16/src/api/todolists-api.ts",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Task/Task.tsx",["89","90","91"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/Users/innafomichova/Documents/incubator/todolist-16/src/index.tsx",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/reportWebVitals.ts",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/app/App.tsx",["92"],"import React, {useEffect} from 'react'\nimport './App.css'\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\nimport {Menu} from '@material-ui/icons'\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './store'\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\nimport {Login} from \"../features/Login/Login\";\nimport {Redirect, Route, Switch} from 'react-router-dom'\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const isInitailized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(initializeAppTC())\n    }, [])\n\n    const logoutHandler = () => {\n        dispatch(logoutTC())\n    }\n\n    if (!isInitailized) {\n        return <h1>Loading....</h1>\n    }\n\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\n\n                </Toolbar>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            <Container fixed>\n                <Switch>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n                    <Route path={'/404'} render={() => <h1>404 Page not found</h1>}/>\n                    <Redirect from={'*'} to={'/404'}/>\n                </Switch>\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","/Users/innafomichova/Documents/incubator/todolist-16/src/components/AddItemForm/AddItemForm.tsx",["93","94","95"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Todolist.tsx",["96","97","98","99","100","101"],"import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Button, IconButton} from '@material-ui/core'\nimport {Delete} from '@material-ui/icons'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\n    console.log('Todolist called')\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        if (demo) {\n            return\n        }\n        const thunk = fetchTasksTC(props.todolist.id)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id)\n    }, [props.addTask, props.todolist.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.todolist.id, title)\n    }, [props.todolist.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\n\n\n    let tasksForTodolist = props.tasks\n\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\n                                                removeTask={props.removeTask}\n                                                changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'default'}\n            >All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":50,"column":11,"nodeType":"108","messageId":"109","endLine":50,"endColumn":14},{"ruleId":"110","severity":1,"message":"111","line":36,"column":8,"nodeType":"112","endLine":36,"endColumn":10,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":41,"column":8,"nodeType":"112","endLine":41,"endColumn":10,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"114","line":45,"column":8,"nodeType":"112","endLine":45,"endColumn":10,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"114","line":50,"column":8,"nodeType":"112","endLine":50,"endColumn":10,"suggestions":"117"},{"ruleId":"110","severity":1,"message":"114","line":55,"column":8,"nodeType":"112","endLine":55,"endColumn":10,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"114","line":60,"column":8,"nodeType":"112","endLine":60,"endColumn":10,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"114","line":65,"column":8,"nodeType":"112","endLine":65,"endColumn":10,"suggestions":"120"},{"ruleId":"110","severity":1,"message":"114","line":70,"column":8,"nodeType":"112","endLine":70,"endColumn":10,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":69,"column":29,"nodeType":"124","messageId":"125","endLine":70,"endColumn":50,"fix":"126"},{"ruleId":"110","severity":1,"message":"127","line":15,"column":97,"nodeType":"112","endLine":15,"endColumn":130,"suggestions":"128"},{"ruleId":"110","severity":1,"message":"127","line":20,"column":8,"nodeType":"112","endLine":20,"endColumn":41,"suggestions":"129"},{"ruleId":"110","severity":1,"message":"127","line":24,"column":8,"nodeType":"112","endLine":24,"endColumn":41,"suggestions":"130"},{"ruleId":"110","severity":1,"message":"131","line":27,"column":8,"nodeType":"112","endLine":27,"endColumn":10,"suggestions":"132"},{"ruleId":"106","severity":1,"message":"133","line":2,"column":9,"nodeType":"108","messageId":"109","endLine":2,"endColumn":12},{"ruleId":"106","severity":1,"message":"134","line":2,"column":14,"nodeType":"108","messageId":"109","endLine":2,"endColumn":20},{"ruleId":"106","severity":1,"message":"135","line":2,"column":22,"nodeType":"108","messageId":"109","endLine":2,"endColumn":33},{"ruleId":"110","severity":1,"message":"136","line":35,"column":8,"nodeType":"112","endLine":35,"endColumn":10,"suggestions":"137"},{"ruleId":"110","severity":1,"message":"127","line":39,"column":8,"nodeType":"112","endLine":39,"endColumn":42,"suggestions":"138"},{"ruleId":"110","severity":1,"message":"127","line":46,"column":8,"nodeType":"112","endLine":46,"endColumn":54,"suggestions":"139"},{"ruleId":"110","severity":1,"message":"127","line":48,"column":95,"nodeType":"112","endLine":48,"endColumn":134,"suggestions":"140"},{"ruleId":"110","severity":1,"message":"127","line":49,"column":101,"nodeType":"112","endLine":49,"endColumn":140,"suggestions":"141"},{"ruleId":"110","severity":1,"message":"127","line":50,"column":107,"nodeType":"112","endLine":50,"endColumn":146,"suggestions":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"@typescript-eslint/no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["145"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["146"],["147"],["148"],["149"],["150"],["151"],["152"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"153","text":"154"},"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["155"],["156"],["157"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["158"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["159"],["160"],["161"],["162"],["163"],["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"167","fix":"170"},{"desc":"167","fix":"171"},{"desc":"167","fix":"172"},{"desc":"167","fix":"173"},{"desc":"167","fix":"174"},[2392,2392]," rel=\"noreferrer\"",{"desc":"175","fix":"176"},{"desc":"175","fix":"177"},{"desc":"175","fix":"178"},{"desc":"167","fix":"179"},{"desc":"180","fix":"181"},{"desc":"175","fix":"182"},{"desc":"175","fix":"183"},{"desc":"175","fix":"184"},{"desc":"175","fix":"185"},{"desc":"175","fix":"186"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"187","text":"188"},"Update the dependencies array to be: [dispatch]",{"range":"189","text":"190"},{"range":"191","text":"190"},{"range":"192","text":"190"},{"range":"193","text":"190"},{"range":"194","text":"190"},{"range":"195","text":"190"},{"range":"196","text":"190"},"Update the dependencies array to be: [props]",{"range":"197","text":"198"},{"range":"199","text":"198"},{"range":"200","text":"198"},{"range":"201","text":"190"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"202","text":"203"},{"range":"204","text":"198"},{"range":"205","text":"198"},{"range":"206","text":"198"},{"range":"207","text":"198"},{"range":"208","text":"198"},[1291,1293],"[demo, dispatch, isLoggedIn]",[1467,1469],"[dispatch]",[1613,1615],[1813,1815],[2021,2023],[2231,2233],[2373,2375],[2547,2549],[765,798],"[props]",[1071,1104],[1261,1294],[1147,1149],[1430,1432],"[demo, dispatch, props.todolist.id]",[1543,1577],[1801,1847],[1944,1983],[2085,2124],[2232,2271]]