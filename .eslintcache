[{"/Users/innafomichova/Documents/incubator/todolist-16/src/index.tsx":"1","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/TodolistsList.tsx":"2","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Task/Task.tsx":"3","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/tasks-reducer.ts":"4","/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/Login.tsx":"5","/Users/innafomichova/Documents/incubator/todolist-16/src/app/App.tsx":"6","/Users/innafomichova/Documents/incubator/todolist-16/src/components/EditableSpan/EditableSpan.tsx":"7","/Users/innafomichova/Documents/incubator/todolist-16/src/api/todolists-api.ts":"8","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/todolists-reducer.ts":"9","/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/auth-reducer.tsx":"10","/Users/innafomichova/Documents/incubator/todolist-16/src/app/app-reducer.ts":"11","/Users/innafomichova/Documents/incubator/todolist-16/src/app/store.ts":"12","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Todolist.tsx":"13","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/tasks-sagas.ts":"14","/Users/innafomichova/Documents/incubator/todolist-16/src/app/app-sagas.ts":"15","/Users/innafomichova/Documents/incubator/todolist-16/src/utils/error-utils.ts":"16"},{"size":752,"mtime":1628782693806,"results":"17","hashOfConfig":"18"},{"size":4111,"mtime":1635000026092,"results":"19","hashOfConfig":"18"},{"size":1773,"mtime":1596295538000,"results":"20","hashOfConfig":"18"},{"size":2575,"mtime":1635000393162,"results":"21","hashOfConfig":"18"},{"size":3674,"mtime":1628790956865,"results":"22","hashOfConfig":"18"},{"size":2407,"mtime":1634935387182,"results":"23","hashOfConfig":"18"},{"size":952,"mtime":1594154724000,"results":"24","hashOfConfig":"18"},{"size":3351,"mtime":1635166822691,"results":"25","hashOfConfig":"18"},{"size":4585,"mtime":1597327450000,"results":"26","hashOfConfig":"18"},{"size":2059,"mtime":1628796007189,"results":"27","hashOfConfig":"18"},{"size":2373,"mtime":1635000393170,"results":"28","hashOfConfig":"18"},{"size":1588,"mtime":1635000458954,"results":"29","hashOfConfig":"18"},{"size":4166,"mtime":1634993134117,"results":"30","hashOfConfig":"18"},{"size":3626,"mtime":1635169684414,"results":"31","hashOfConfig":"18"},{"size":863,"mtime":1635000393138,"results":"32","hashOfConfig":"18"},{"size":1185,"mtime":1635169306090,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"idige3",{"filePath":"37","messages":"38","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/innafomichova/Documents/incubator/todolist-16/src/index.tsx",[],["75","76"],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/TodolistsList.tsx",["77","78","79","80","81","82","83","84"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom';\r\nimport {addTaskACSaga, removeTaskACSaga, updateTaskACSaga} from './tasks-sagas';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskACSaga(todolistId, id))\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskACSaga(todolistId, title))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        // const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(updateTaskACSaga(todolistId, id, {status}))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        // const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(updateTaskACSaga(todolistId, id, {title: newTitle}))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Task/Task.tsx",["85","86","87"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/tasks-reducer.ts",["88"],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/Login.tsx",["89"],"import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./auth-reducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required';\n            } else if (values.password.length < 4) {\n                errors.password = 'Must be 4 characters or more';\n            }\n            return errors;\n        },\n\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        },\n    })\n\n    if(isLoggedIn){\n        return <Redirect to={'/'} />\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            // name='email'\n                            // onBlur={formik.handleBlur}\n                            // onChange={formik.handleChange}\n                            // value={formik.values.email}\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email && <div style={{'color': 'red'}}>{formik.errors.email}</div>}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{'color': 'red'}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            checked={formik.values.rememberMe}\n                            {...formik.getFieldProps('rememberMe')}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n\n",["90","91"],"/Users/innafomichova/Documents/incubator/todolist-16/src/app/App.tsx",["92"],"import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppAC, RequestStatusType} from './app-reducer'\r\nimport {Login} from '../features/Login/Login';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {logoutTC} from '../features/Login/auth-reducer';\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitailized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppAC())\r\n    }, [])\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitailized) {\r\n        return <h1>Loading....</h1>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'} render={() => <h1>404 Page not found</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n",["93","94"],"/Users/innafomichova/Documents/incubator/todolist-16/src/components/EditableSpan/EditableSpan.tsx",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/api/todolists-api.ts",["95"],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/todolists-reducer.ts",["96"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","/Users/innafomichova/Documents/incubator/todolist-16/src/features/Login/auth-reducer.tsx",["97","98"],"import {Dispatch} from \"redux\";\r\n\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\r\nimport {authAPI, LoginRequestType, todolistsAPI} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {addTaskAC} from \"../TodolistsList/tasks-reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginRequestType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\r\n\r\n","/Users/innafomichova/Documents/incubator/todolist-16/src/app/app-reducer.ts",["99","100","101","102","103","104"],"/Users/innafomichova/Documents/incubator/todolist-16/src/app/store.ts",["105"],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/Todolist/Todolist.tsx",["106","107","108","109","110","111"],"/Users/innafomichova/Documents/incubator/todolist-16/src/features/TodolistsList/tasks-sagas.ts",["112"],"/Users/innafomichova/Documents/incubator/todolist-16/src/app/app-sagas.ts",[],"/Users/innafomichova/Documents/incubator/todolist-16/src/utils/error-utils.ts",["113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":37,"column":8,"nodeType":"120","endLine":37,"endColumn":10,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":41,"column":8,"nodeType":"120","endLine":41,"endColumn":10,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"122","line":45,"column":8,"nodeType":"120","endLine":45,"endColumn":10,"suggestions":"124"},{"ruleId":"118","severity":1,"message":"122","line":50,"column":8,"nodeType":"120","endLine":50,"endColumn":10,"suggestions":"125"},{"ruleId":"118","severity":1,"message":"122","line":55,"column":8,"nodeType":"120","endLine":55,"endColumn":10,"suggestions":"126"},{"ruleId":"118","severity":1,"message":"122","line":60,"column":8,"nodeType":"120","endLine":60,"endColumn":10,"suggestions":"127"},{"ruleId":"118","severity":1,"message":"122","line":65,"column":8,"nodeType":"120","endLine":65,"endColumn":10,"suggestions":"128"},{"ruleId":"118","severity":1,"message":"122","line":70,"column":8,"nodeType":"120","endLine":70,"endColumn":10,"suggestions":"129"},{"ruleId":"118","severity":1,"message":"130","line":15,"column":97,"nodeType":"120","endLine":15,"endColumn":130,"suggestions":"131"},{"ruleId":"118","severity":1,"message":"130","line":20,"column":8,"nodeType":"120","endLine":20,"endColumn":41,"suggestions":"132"},{"ruleId":"118","severity":1,"message":"130","line":24,"column":8,"nodeType":"120","endLine":24,"endColumn":41,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":14,"column":94,"nodeType":"136","messageId":"137","endLine":14,"endColumn":96},{"ruleId":"138","severity":1,"message":"139","line":58,"column":32,"nodeType":"140","endLine":58,"endColumn":49},{"ruleId":"114","replacedBy":"141"},{"ruleId":"116","replacedBy":"142"},{"ruleId":"118","severity":1,"message":"143","line":27,"column":8,"nodeType":"120","endLine":27,"endColumn":10,"suggestions":"144"},{"ruleId":"114","replacedBy":"145"},{"ruleId":"116","replacedBy":"146"},{"ruleId":null,"fatal":true,"severity":2,"message":"147","line":31,"column":8},{"ruleId":"134","severity":1,"message":"135","line":10,"column":45,"nodeType":"136","messageId":"137","endLine":10,"endColumn":47},{"ruleId":"148","severity":1,"message":"149","line":4,"column":36,"nodeType":"150","messageId":"151","endLine":4,"endColumn":48},{"ruleId":"148","severity":1,"message":"152","line":6,"column":9,"nodeType":"150","messageId":"151","endLine":6,"endColumn":18},{"ruleId":"148","severity":1,"message":"153","line":1,"column":9,"nodeType":"150","messageId":"151","endLine":1,"endColumn":16},{"ruleId":"148","severity":1,"message":"154","line":2,"column":9,"nodeType":"150","messageId":"151","endLine":2,"endColumn":24},{"ruleId":"148","severity":1,"message":"155","line":3,"column":9,"nodeType":"150","messageId":"151","endLine":3,"endColumn":29},{"ruleId":"148","severity":1,"message":"156","line":3,"column":31,"nodeType":"150","messageId":"151","endLine":3,"endColumn":55},{"ruleId":"148","severity":1,"message":"157","line":4,"column":9,"nodeType":"150","messageId":"151","endLine":4,"endColumn":13},{"ruleId":"148","severity":1,"message":"158","line":4,"column":15,"nodeType":"150","messageId":"151","endLine":4,"endColumn":18},{"ruleId":"148","severity":1,"message":"159","line":8,"column":14,"nodeType":"150","messageId":"151","endLine":8,"endColumn":23},{"ruleId":"118","severity":1,"message":"160","line":35,"column":8,"nodeType":"120","endLine":35,"endColumn":10,"suggestions":"161"},{"ruleId":"118","severity":1,"message":"130","line":39,"column":8,"nodeType":"120","endLine":39,"endColumn":42,"suggestions":"162"},{"ruleId":"118","severity":1,"message":"130","line":46,"column":8,"nodeType":"120","endLine":46,"endColumn":54,"suggestions":"163"},{"ruleId":"118","severity":1,"message":"130","line":48,"column":95,"nodeType":"120","endLine":48,"endColumn":134,"suggestions":"164"},{"ruleId":"118","severity":1,"message":"130","line":49,"column":101,"nodeType":"120","endLine":49,"endColumn":140,"suggestions":"165"},{"ruleId":"118","severity":1,"message":"130","line":50,"column":107,"nodeType":"120","endLine":50,"endColumn":146,"suggestions":"166"},{"ruleId":"148","severity":1,"message":"167","line":30,"column":9,"nodeType":"150","messageId":"151","endLine":30,"endColumn":41},{"ruleId":null,"fatal":true,"severity":2,"message":"168","line":21,"column":42},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.","ArrayExpression",["171"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["172"],["173"],["174"],["175"],["176"],["177"],["178"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["179"],["180"],["181"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",["169"],["170"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["182"],["169"],["170"],"Parsing error: Declaration or statement expected.","@typescript-eslint/no-unused-vars","'todolistsAPI' is defined but never used.","Identifier","unusedVar","'addTaskAC' is defined but never used.","'authAPI' is defined but never used.","'setIsLoggedInAC' is defined but never used.","'handleServerAppError' is defined but never used.","'handleServerNetworkError' is defined but never used.","'call' is defined but never used.","'put' is defined but never used.","'takeEvery' is defined but never used.","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["183"],["184"],["185"],["186"],["187"],["188"],"'res' is assigned a value but never used.","Parsing error: '(' expected.","no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"191","fix":"193"},{"desc":"191","fix":"194"},{"desc":"191","fix":"195"},{"desc":"191","fix":"196"},{"desc":"191","fix":"197"},{"desc":"191","fix":"198"},{"desc":"199","fix":"200"},{"desc":"199","fix":"201"},{"desc":"199","fix":"202"},{"desc":"191","fix":"203"},{"desc":"204","fix":"205"},{"desc":"199","fix":"206"},{"desc":"199","fix":"207"},{"desc":"199","fix":"208"},{"desc":"199","fix":"209"},{"desc":"199","fix":"210"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"211","text":"212"},"Update the dependencies array to be: [dispatch]",{"range":"213","text":"214"},{"range":"215","text":"214"},{"range":"216","text":"214"},{"range":"217","text":"214"},{"range":"218","text":"214"},{"range":"219","text":"214"},{"range":"220","text":"214"},"Update the dependencies array to be: [props]",{"range":"221","text":"222"},{"range":"223","text":"222"},{"range":"224","text":"222"},{"range":"225","text":"214"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"226","text":"227"},{"range":"228","text":"222"},{"range":"229","text":"222"},{"range":"230","text":"222"},{"range":"231","text":"222"},{"range":"232","text":"222"},[1369,1371],"[demo, dispatch, isLoggedIn]",[1515,1517],"[dispatch]",[1661,1663],[1906,1908],[2168,2170],[2369,2371],[2516,2518],[2695,2697],[765,798],"[props]",[1071,1104],[1261,1294],[1173,1175],[1437,1439],"[demo, dispatch, props.todolist.id]",[1554,1588],[1819,1865],[1964,2003],[2106,2145],[2254,2293]]